{"ast":null,"code":"var _jsxFileName = \"/Users/cbrockbank/dev/other/BackUp uubc/homework/19-homework/react-click-game/click-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport CreateCard from \"./components/cards\";\nimport clickers from \"./clickers.json\";\nimport Wrapper from \"./components/wrapper\";\nimport Header from \"./components/Header\"; // import Footer from \"./components/Footer\"\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clickers,\n      score: 0,\n      highscore: 0,\n      maxscore: 12\n    };\n\n    this.gameOver = () => {\n      // build the function out so that it will reset the game\n      console.log(\"Game Over was fired\");\n      this.setState({\n        score: this.state.score = 0\n      }); // console.log(this.imageClicked)\n    };\n\n    this.imageClicked = id => {\n      // get the ID of the card that is clicked on\n      const imageClick = id; // console.log(imageClick)\n\n      const status = this.state.clickers; // console.log(status)\n      //grab the cards array off state\n\n      const clicked = this.state.clickers; // console.log(clicked)\n      // this gets reassigned\n\n      let indexOfCardClicked; //find the card object on state \n\n      clicked.find(function (element, index) {\n        if (element.id === imageClick) {\n          console.log(\"if statement fired off\"); // write our if statement that will return true if clicked\n          // console.log(\"ID: \" + id)\n          // console.log(\"image Clicked: \" + imageClick)\n\n          console.log(\"element: \" + element.id); // the if statement below works when its changed to true. We just need \n          // to now figure out how the if statment will see if both have been clicked\n          // if statement that we are trying to see matches.\n          // if (id === imageClick) {\n          //   console.log(\"clicked same one fired off\")\n          // status[index].buttonClicked = false;\n          // }\n\n          if (element) // return the index that was clicked\n            // index will become the \"returnedArray\"\n            indexOfCardClicked = index;\n          return index;\n        } else {\n          return false;\n        }\n      }); // console.log showing \"true\" or \"false\"\n      // console.log(clicked[indexOfCardClicked].buttonClicked)\n\n      const test = clicked[indexOfCardClicked].buttonClicked;\n      console.log(test); // see if it has been clicked\n      // if its === true (has been clicked) call \"gameOver\" & reset\n\n      if (clicked[indexOfCardClicked].buttonClicked === true) {\n        // Call the game over function\n        console.log(\"if its true statement is working\"); // this.gameOver()\n      } else {\n        // Adding 1 to the score for each click\n        this.setState({\n          score: this.state.score + 1\n        }); // console.log(this.state.score)\n        //shuffle the clickers\n\n        this.state.clickers.sort(() => Math.random() - 0.5);\n      }\n    };\n  }\n\n  // render our page\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      highscore: this.state.highscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), this.state.clickers.map(clickers => React.createElement(CreateCard, {\n      id: clickers.id,\n      key: clickers.id,\n      image: clickers.image,\n      handleClick: this.imageClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cbrockbank/dev/other/BackUp uubc/homework/19-homework/react-click-game/click-game/src/App.js"],"names":["React","Component","CreateCard","clickers","Wrapper","Header","App","state","score","highscore","maxscore","gameOver","console","log","setState","imageClicked","id","imageClick","status","clicked","indexOfCardClicked","find","element","index","test","buttonClicked","sort","Math","random","render","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport CreateCard from \"./components/cards\"\nimport clickers from \"./clickers.json\";\nimport Wrapper from \"./components/wrapper\"\nimport Header from \"./components/Header\"\n\n\n// import Footer from \"./components/Footer\"\n\nclass App extends Component {\n  \n  // Setting this.state.friends to the friends json array\n  state = {\n    clickers,\n    score: 0,\n    highscore: 0,\n    maxscore: 12\n  };\n\n\n  gameOver = () => {\n    // build the function out so that it will reset the game\n    console.log(\"Game Over was fired\")\n    this.setState({score : this.state.score = 0})\n    // console.log(this.imageClicked)\n  }\n\n  \n  \n  // function for clickers\n  imageClicked = id => {\n    \n    // get the ID of the card that is clicked on\n    const imageClick = id\n    // console.log(imageClick)\n\n    const status = this.state.clickers\n    // console.log(status)\n   \n    //grab the cards array off state\n    const clicked = this.state.clickers\n    // console.log(clicked)\n\n    // this gets reassigned\n    let indexOfCardClicked;\n\n    \n\n\n\n\n\n\n\n\n\n\n    //find the card object on state \n    clicked.find(function(element, index) {\n      if (element.id === imageClick) {\n        \n        console.log(\"if statement fired off\")\n        // write our if statement that will return true if clicked\n        // console.log(\"ID: \" + id)\n        // console.log(\"image Clicked: \" + imageClick)\n        console.log(\"element: \" + element.id)\n\n\n        // the if statement below works when its changed to true. We just need \n        // to now figure out how the if statment will see if both have been clicked\n\n\n              // if statement that we are trying to see matches.\n        // if (id === imageClick) {\n        //   console.log(\"clicked same one fired off\")\n\n        // status[index].buttonClicked = false;\n        // }\n\n        if (element)\n\n\n        // return the index that was clicked\n        // index will become the \"returnedArray\"\n        indexOfCardClicked = index;\n        return index;\n\n\n      } else {\n\n        return false;\n      }\n    });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    // console.log showing \"true\" or \"false\"\n    // console.log(clicked[indexOfCardClicked].buttonClicked)\n    const test = clicked[indexOfCardClicked].buttonClicked\n    console.log(test)\n\n\n// see if it has been clicked\n// if its === true (has been clicked) call \"gameOver\" & reset\nif (clicked[indexOfCardClicked].buttonClicked === true) {\n      \n      // Call the game over function\n      console.log(\"if its true statement is working\")\n      // this.gameOver()\n      \n    } else {\n    // Adding 1 to the score for each click\n    this.setState({score : this.state.score + 1})\n    // console.log(this.state.score)\n\n    //shuffle the clickers\n    this.state.clickers.sort(() => Math.random() - 0.5)\n      \n  \n    }\n  }\n\n  // render our page\n  render() {\n    return(\n      \n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}/>\n      {/* Add title */}\n        {this.state.clickers.map(clickers => (\n          <CreateCard\n            id={clickers.id}\n            key={clickers.id}\n            image={clickers.image}\n            handleClick = {this.imageClicked}\n            />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}